name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to attach binaries to (e.g., v0.1.0)"
        required: false
        default: "test-build"

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install MSYS2 and GDAL
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gdal
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-toolchain

      - name: Verify GCC installation
        shell: pwsh
        run: |
          Write-Host "=== Check if GCC files exist ==="
          if (Test-Path "C:\msys64\mingw64\bin\gcc.exe") {
            Write-Host "✅ gcc.exe found!"
          } else {
            Write-Host "❌ gcc.exe NOT found"
            Write-Host "Force installing GCC toolchain..."
            C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pacman -S --noconfirm --overwrite '*' mingw-w64-x86_64-gcc mingw-w64-x86_64-toolchain"
          }

      - name: Setup Rust with GNU toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-pc-windows-gnu

      - name: Configure build environment
        shell: pwsh
        run: |
          # Set up environment variables
          echo "GDAL_HOME=C:\msys64\mingw64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_LIB_DIR=C:\msys64\mingw64\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_INCLUDE_DIR=C:\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Add MSYS2 to PATH
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create Cargo config for GNU toolchain
        shell: pwsh
        run: |
          New-Item -Path "$env:USERPROFILE\.cargo" -ItemType Directory -Force
          @"
          [target.x86_64-pc-windows-gnu]
          linker = "C:\\msys64\\mingw64\\bin\\gcc.exe"
          ar = "C:\\msys64\\mingw64\\bin\\ar.exe"

          [build]
          target = "x86_64-pc-windows-gnu"
          "@ | Out-File -FilePath "$env:USERPROFILE\.cargo\config.toml" -Encoding UTF8

      - name: Fix GDAL library naming for gdal-sys
        shell: pwsh
        run: |
          Write-Host "=== Fixing GDAL library naming ==="
          if (Test-Path "C:\msys64\mingw64\lib\libgdal.dll.a") {
            Copy-Item "C:\msys64\mingw64\lib\libgdal.dll.a" "C:\msys64\mingw64\lib\gdal_i.lib"
            Write-Host "✅ Created gdal_i.lib for gdal-sys"
          } else {
            Write-Host "❌ libgdal.dll.a not found!"
            exit 1
          }

      - name: Try GNU build with system library preference
        id: gnu_build
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Host "=== Attempting GNU build ==="
          
          # Force system library preference (from Rust PR #67429)
          $env:LIBRARY_PATH = "C:\msys64\mingw64\lib;$env:LIBRARY_PATH"
          $env:RUSTFLAGS = "-L native=C:\msys64\mingw64\lib -C link-args=-Wl,--library-path,C:\msys64\mingw64\lib"
          
          # Bypass bindgen
          $env:DOCS_RS = "1"
          
          # Try static linking
          $env:GDAL_STATIC = "1"
          
          # Build
          cargo build --release --target x86_64-pc-windows-gnu --verbose
          
          # Check if binary exists
          if (Test-Path "target\x86_64-pc-windows-gnu\release\raster-calc.exe") {
            Write-Host "✅ GNU build successful!"
            echo "BUILD_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "BINARY_PATH=target\x86_64-pc-windows-gnu\release\raster-calc.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "❌ GNU build failed - binary not created"
            exit 1
          }

      - name: Fallback to MSVC build
        if: steps.gnu_build.outcome == 'failure'
        shell: pwsh
        run: |
          Write-Host "=== GNU build failed, trying MSVC fallback ==="
          
          # Install MSVC toolchain
          rustup install stable-x86_64-pc-windows-msvc
          rustup default stable-x86_64-pc-windows-msvc
          
          # Install GDAL via conda
          Write-Host "Installing conda and GDAL..."
          choco install miniconda3 -y --no-progress
          $env:PATH = "C:\ProgramData\miniconda3\Scripts;C:\ProgramData\miniconda3\Library\bin;$env:PATH"
          
          # Install GDAL
          conda install -c conda-forge gdal -y -q
          
          # Set GDAL environment for MSVC
          $env:GDAL_HOME = "C:\ProgramData\miniconda3\Library"
          $env:GDAL_LIB_DIR = "C:\ProgramData\miniconda3\Library\lib"
          $env:GDAL_INCLUDE_DIR = "C:\ProgramData\miniconda3\Library\include"
          
          # Create new Cargo config for MSVC
          @"
          [build]
          target = "x86_64-pc-windows-msvc"
          "@ | Out-File -FilePath "$env:USERPROFILE\.cargo\config.toml" -Encoding UTF8
          
          # Build with MSVC
          cargo build --release --target x86_64-pc-windows-msvc --verbose
          
          # Check if binary exists
          if (Test-Path "target\x86_64-pc-windows-msvc\release\raster-calc.exe") {
            Write-Host "✅ MSVC build successful!"
            echo "BUILD_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "BINARY_PATH=target\x86_64-pc-windows-msvc\release\raster-calc.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "❌ MSVC build also failed"
            exit 1
          }

      - name: Test binary
        if: env.BUILD_SUCCESS == 'true'
        shell: pwsh
        run: |
          Write-Host "=== Testing binary ==="
          if (Test-Path $env:BINARY_PATH) {
            & $env:BINARY_PATH --help
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Binary test successful"
            } else {
              Write-Host "❌ Binary test failed"
            }
          }

      - name: Create release package
        if: env.BUILD_SUCCESS == 'true'
        shell: pwsh
        run: |
          Write-Host "=== Creating release package ==="
          Compress-Archive -Path $env:BINARY_PATH -DestinationPath "raster-calc-windows-x86_64.zip" -Force
          Write-Host "✅ Package created"

      - name: Upload artifacts
        if: env.BUILD_SUCCESS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: raster-calc-windows-x86_64
          path: raster-calc-windows-x86_64.zip