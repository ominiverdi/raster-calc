name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag to attach binaries to (e.g., v0.1.0)'
        required: false
        default: 'test-build'

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install MSYS2 and dependencies
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gdal
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-make
          mingw-w64-x86_64-cmake
    
    - name: Verify MSYS2 installation and setup environment
      shell: pwsh
      run: |
        Write-Host "=== Verifying MSYS2 Installation ==="
        
        # Check if MSYS2 directories exist
        $msys2Paths = @(
          "C:\msys64",
          "C:\msys64\mingw64",
          "C:\msys64\mingw64\bin",
          "C:\msys64\usr\bin"
        )
        
        foreach ($path in $msys2Paths) {
          if (Test-Path $path) {
            Write-Host "✅ Found: $path"
          } else {
            Write-Host "❌ Missing: $path"
            exit 1
          }
        }
        
        # Check for critical executables
        $criticalExes = @(
          "C:\msys64\mingw64\bin\gcc.exe",
          "C:\msys64\mingw64\bin\g++.exe",
          "C:\msys64\mingw64\bin\ar.exe",
          "C:\msys64\mingw64\bin\pkg-config.exe"
        )
        
        foreach ($exe in $criticalExes) {
          if (Test-Path $exe) {
            Write-Host "✅ Found: $exe"
          } else {
            Write-Host "❌ Missing: $exe"
            
            # Try to find it elsewhere
            Write-Host "Searching for $(Split-Path $exe -Leaf)..."
            Get-ChildItem -Path "C:\msys64" -Recurse -Name "$(Split-Path $exe -Leaf)" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "  Found at: C:\msys64\$_"
            }
            exit 1
          }
        }
        
        # Test GDAL installation via MSYS2
        Write-Host "=== Testing GDAL via MSYS2 ==="
        try {
          $gdalVersion = & C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && gdal-config --version" 2>$null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ GDAL version: $gdalVersion"
          } else {
            Write-Host "❌ GDAL not accessible via gdal-config"
          }
        } catch {
          Write-Host "❌ Error testing GDAL: $_"
        }
        
        # Set up environment variables for subsequent steps
        Write-Host "=== Setting up environment variables ==="
        echo "GDAL_HOME=C:\msys64\mingw64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GDAL_LIB_DIR=C:\msys64\mingw64\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GDAL_INCLUDE_DIR=C:\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "RUSTUP_TOOLCHAIN=stable-x86_64-pc-windows-gnu" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Add to PATH (order matters - put MSYS2 first)
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        Write-Host "✅ Environment setup complete"
    
    - name: Setup Rust with GNU toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable-x86_64-pc-windows-gnu
    
    - name: Create Cargo config
      shell: pwsh
      run: |
        Write-Host "=== Creating Cargo configuration ==="
        
        # Ensure .cargo directory exists
        $cargoDir = "$env:USERPROFILE\.cargo"
        New-Item -Path $cargoDir -ItemType Directory -Force | Out-Null
        
        # Verify linker exists before configuring it
        $linkerPath = "C:\msys64\mingw64\bin\gcc.exe"
        $arPath = "C:\msys64\mingw64\bin\ar.exe"
        
        if (-not (Test-Path $linkerPath)) {
          Write-Host "❌ Linker not found at: $linkerPath"
          exit 1
        }
        
        if (-not (Test-Path $arPath)) {
          Write-Host "❌ Archiver not found at: $arPath"
          exit 1
        }
        
        Write-Host "✅ Linker found: $linkerPath"
        Write-Host "✅ Archiver found: $arPath"
        
        # Create cargo config with proper escaping
        $configContent = @"
[target.x86_64-pc-windows-gnu]
linker = "C:\\msys64\\mingw64\\bin\\gcc.exe"
ar = "C:\\msys64\\mingw64\\bin\\ar.exe"

[build]
target = "x86_64-pc-windows-gnu"

[env]
PKG_CONFIG_PATH = "C:\\msys64\\mingw64\\lib\\pkgconfig"
"@
        
        $configPath = "$cargoDir\config.toml"
        $configContent | Out-File -FilePath $configPath -Encoding UTF8
        
        Write-Host "✅ Cargo config created at: $configPath"
        Write-Host "Config contents:"
        Get-Content $configPath | ForEach-Object { Write-Host "  $_" }
    
    - name: Verify build environment
      shell: pwsh
      run: |
        Write-Host "=== Verifying Build Environment ==="
        
        # Test Rust toolchain
        Write-Host "Rust toolchain:"
        rustup default stable-x86_64-pc-windows-gnu
        rustc --version --verbose
        
        # Test PATH
        Write-Host "`nCurrent PATH (MSYS2 entries):"
        $env:PATH -split ';' | Where-Object { $_ -like "*msys*" } | ForEach-Object { Write-Host "  $_" }
        
        # Test environment variables
        Write-Host "`nEnvironment variables:"
        Write-Host "  GDAL_HOME: $env:GDAL_HOME"
        Write-Host "  PKG_CONFIG_PATH: $env:PKG_CONFIG_PATH"
        Write-Host "  RUSTUP_TOOLCHAIN: $env:RUSTUP_TOOLCHAIN"
        
        # Test linker directly
        Write-Host "`nTesting linker:"
        try {
          $linkerVersion = & "C:\msys64\mingw64\bin\gcc.exe" --version 2>$null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Linker test successful"
            Write-Host "  $($linkerVersion[0])"
          } else {
            Write-Host "❌ Linker test failed"
            exit 1
          }
        } catch {
          Write-Host "❌ Linker test exception: $_"
          exit 1
        }
        
        # Test pkg-config for GDAL
        Write-Host "`nTesting pkg-config for GDAL:"
        try {
          $env:PKG_CONFIG_PATH = "C:\msys64\mingw64\lib\pkgconfig"
          $gdalLibs = & "C:\msys64\mingw64\bin\pkg-config.exe" --libs gdal 2>$null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ GDAL pkg-config successful"
            Write-Host "  Libs: $gdalLibs"
          } else {
            Write-Host "⚠️ GDAL pkg-config failed, but continuing..."
          }
        } catch {
          Write-Host "⚠️ GDAL pkg-config exception: $_, but continuing..."
        }
        
        Write-Host "`n✅ Build environment verification complete"
    
    - name: Build project
      shell: pwsh
      run: |
        Write-Host "=== Building Project ==="
        
        # Ensure environment is set for this step
        $env:PKG_CONFIG_PATH = "C:\msys64\mingw64\lib\pkgconfig"
        $env:GDAL_HOME = "C:\msys64\mingw64"
        
        Write-Host "Starting cargo build..."
        try {
          cargo build --release --target x86_64-pc-windows-gnu --verbose
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Build successful!"
            
            # Verify output file exists
            $outputPath = "target\x86_64-pc-windows-gnu\release\raster-calc.exe"
            if (Test-Path $outputPath) {
              Write-Host "✅ Output binary found: $outputPath"
              $fileInfo = Get-Item $outputPath
              Write-Host "  Size: $($fileInfo.Length) bytes"
              Write-Host "  Modified: $($fileInfo.LastWriteTime)"
            } else {
              Write-Host "❌ Output binary not found at: $outputPath"
              exit 1
            }
          } else {
            Write-Host "❌ Build failed with exit code: $LASTEXITCODE"
            exit 1
          }
        } catch {
          Write-Host "❌ Build exception: $_"
          exit 1
        }
    
    - name: Test binary
      shell: pwsh
      run: |
        Write-Host "=== Testing Binary ==="
        
        $binaryPath = "target\x86_64-pc-windows-gnu\release\raster-calc.exe"
        
        if (Test-Path $binaryPath) {
          Write-Host "Testing binary execution..."
          try {
            # Test help command
            $helpOutput = & $binaryPath --help 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Binary execution test successful"
              Write-Host "Help output (first few lines):"
              $helpOutput | Select-Object -First 5 | ForEach-Object { Write-Host "  $_" }
            } else {
              Write-Host "❌ Binary execution test failed"
              Write-Host "Output: $helpOutput"
            }
          } catch {
            Write-Host "❌ Binary test exception: $_"
          }
        } else {
          Write-Host "❌ Binary not found for testing"
          exit 1
        }
    
    - name: Create release package
      if: success()
      shell: pwsh
      run: |
        Write-Host "=== Creating Release Package ==="
        
        $binaryPath = "target\x86_64-pc-windows-gnu\release\raster-calc.exe"
        $packageName = "raster-calc-windows-x86_64.zip"
        
        if (Test-Path $binaryPath) {
          # Create zip package
          Compress-Archive -Path $binaryPath -DestinationPath $packageName -Force
          
          if (Test-Path $packageName) {
            Write-Host "✅ Package created: $packageName"
            $packageInfo = Get-Item $packageName
            Write-Host "  Package size: $($packageInfo.Length) bytes"
          } else {
            Write-Host "❌ Package creation failed"
            exit 1
          }
        } else {
          Write-Host "❌ Binary not found for packaging"
          exit 1
        }
    
    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: raster-calc-windows-x86_64
        path: raster-calc-windows-x86_64.zip
        retention-days: 30
        
    - name: Upload to release (if tag provided)
      if: success() && github.event.inputs.tag_name != 'test-build'
      uses: softprops/action-gh-release@v2
      with:
        files: raster-calc-windows-x86_64.zip
        tag_name: ${{ github.event.inputs.tag_name }}
        fail_on_unmatched_files: true