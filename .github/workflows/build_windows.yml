name: Build Windows Release (Fixed)

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to attach binaries to (e.g., v0.1.0)"
        required: false
        default: "test-build"

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust MSVC toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-pc-windows-msvc

      - name: Download and setup GDAL from GIS Internals
        shell: pwsh
        run: |
          Write-Host "=== Downloading GDAL from GIS Internals (recommended approach) ==="
          
          # Create GDAL directory
          New-Item -ItemType Directory -Path "C:\gdal" -Force
          
          # Download GDAL development libraries (MSVC 2019, x64)
          # Using GDAL 3.8.4 (adjust version as needed)
          $gdalUrl = "https://download.gisinternals.com/sdk/downloads/release-1930-x64-gdal-3-8-4-mapserver-8-0-1.zip"
          $gdalZip = "C:\gdal\gdal-dev.zip"
          
          Write-Host "Downloading GDAL from: $gdalUrl"
          try {
            Invoke-WebRequest -Uri $gdalUrl -OutFile $gdalZip -UseBasicParsing
            Write-Host "✅ Download completed"
          } catch {
            Write-Host "❌ Download failed: $_"
            # Try alternative URL or fallback
            $gdalUrl = "https://download.gisinternals.com/sdk/downloads/release-1930-x64-gdal-3-7-3-mapserver-8-0-1.zip"
            Write-Host "Trying alternative URL: $gdalUrl"
            Invoke-WebRequest -Uri $gdalUrl -OutFile $gdalZip -UseBasicParsing
          }
          
          # Extract GDAL
          Write-Host "Extracting GDAL..."
          Expand-Archive -Path $gdalZip -DestinationPath "C:\gdal" -Force
          
          # Find the extracted directory (it usually has a version-specific name)
          $gdalDir = Get-ChildItem "C:\gdal" -Directory | Where-Object { $_.Name -like "*gdal*" -or $_.Name -like "*release*" } | Select-Object -First 1
          if ($gdalDir) {
            $gdalRoot = $gdalDir.FullName
          } else {
            # If no subdirectory, use C:\gdal directly
            $gdalRoot = "C:\gdal"
          }
          
          Write-Host "GDAL extracted to: $gdalRoot"
          
          # Set environment variables for build
          echo "GDAL_HOME=$gdalRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_LIB_DIR=$gdalRoot\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_INCLUDE_DIR=$gdalRoot\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_VERSION=3.8.4" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Add to PATH for runtime
          echo "$gdalRoot\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify GDAL installation
        shell: pwsh
        run: |
          Write-Host "=== Verifying GDAL installation ==="
          
          Write-Host "Environment variables:"
          Write-Host "GDAL_HOME: $env:GDAL_HOME"
          Write-Host "GDAL_LIB_DIR: $env:GDAL_LIB_DIR"  
          Write-Host "GDAL_INCLUDE_DIR: $env:GDAL_INCLUDE_DIR"
          Write-Host "GDAL_VERSION: $env:GDAL_VERSION"
          
          # Check for required files
          $requiredFiles = @(
            "$env:GDAL_LIB_DIR\gdal_i.lib",
            "$env:GDAL_INCLUDE_DIR\gdal.h"
          )
          
          foreach ($file in $requiredFiles) {
            if (Test-Path $file) {
              Write-Host "✅ Found: $file"
            } else {
              Write-Host "❌ Missing: $file"
              
              # List what we actually have
              if (Test-Path $env:GDAL_LIB_DIR) {
                Write-Host "Available lib files:"
                Get-ChildItem "$env:GDAL_LIB_DIR\*.lib" | ForEach-Object { Write-Host "  $($_.Name)" }
              }
              
              if (Test-Path $env:GDAL_INCLUDE_DIR) {
                Write-Host "Available include files:"
                Get-ChildItem "$env:GDAL_INCLUDE_DIR\gdal*" | ForEach-Object { Write-Host "  $($_.Name)" }
              }
            }
          }
          
          # If gdal_i.lib doesn't exist but gdal.lib does, copy it
          $gdalLib = "$env:GDAL_LIB_DIR\gdal.lib"
          $gdalILib = "$env:GDAL_LIB_DIR\gdal_i.lib"
          
          if ((Test-Path $gdalLib) -and (-not (Test-Path $gdalILib))) {
            Write-Host "🔧 Copying gdal.lib to gdal_i.lib (naming compatibility fix)"
            Copy-Item $gdalLib $gdalILib
          }

      - name: Build with MSVC
        shell: pwsh
        run: |
          Write-Host "=== Building with MSVC ==="
          
          # Verify environment is set
          Write-Host "Build environment:"
          Write-Host "GDAL_HOME: $env:GDAL_HOME"
          Write-Host "GDAL_LIB_DIR: $env:GDAL_LIB_DIR"
          Write-Host "GDAL_INCLUDE_DIR: $env:GDAL_INCLUDE_DIR"
          Write-Host "GDAL_VERSION: $env:GDAL_VERSION"
          
          # Build
          cargo build --release --target x86_64-pc-windows-msvc --verbose
          
          # Verify binary was created
          if (Test-Path "target\x86_64-pc-windows-msvc\release\raster-calc.exe") {
            Write-Host "✅ Build successful!"
            
            # Show binary info
            $binary = Get-Item "target\x86_64-pc-windows-msvc\release\raster-calc.exe"
            Write-Host "Binary size: $([math]::Round($binary.Length / 1MB, 2)) MB"
          } else {
            Write-Host "❌ Build failed - binary not created"
            exit 1
          }

      - name: Test binary
        shell: pwsh
        run: |
          Write-Host "=== Testing binary ==="
          
          # Add GDAL DLLs to PATH for testing
          $env:PATH = "$env:GDAL_HOME\bin;$env:PATH"
          
          # Test the binary
          $binary = "target\x86_64-pc-windows-msvc\release\raster-calc.exe"
          
          Write-Host "Testing --help:"
          & $binary --help
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Binary test successful!"
            
            Write-Host "Testing --version:"
            & $binary --version
          } else {
            Write-Host "❌ Binary test failed (exit code: $LASTEXITCODE)"
            
            # Check for missing DLLs
            Write-Host "Checking for missing dependencies..."
            try {
              & $binary 2>&1 | Write-Host
            } catch {
              Write-Host "Error details: $_"
            }
            
            exit 1
          }

      - name: Create release package
        shell: pwsh
        run: |
          Write-Host "=== Creating release package ==="
          
          # Create a directory with the binary and required DLLs
          New-Item -ItemType Directory -Path "release_package" -Force
          
          # Copy the binary
          Copy-Item "target\x86_64-pc-windows-msvc\release\raster-calc.exe" "release_package\"
          
          # Copy required GDAL DLLs
          $gdalBinDir = "$env:GDAL_HOME\bin"
          if (Test-Path $gdalBinDir) {
            Write-Host "Copying GDAL DLLs from: $gdalBinDir"
            Get-ChildItem "$gdalBinDir\*.dll" | ForEach-Object {
              Copy-Item $_.FullName "release_package\"
              Write-Host "  Copied: $($_.Name)"
            }
          }
          
          # Create README for the package
          @"
# raster-calc Windows Release
