name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to attach binaries to (e.g., v0.1.0)"
        required: false
        default: "test-build"

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install MSYS2 and GDAL
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gdal
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-toolchain

      - name: Verify GCC installation
        shell: pwsh
        run: |
          Write-Host "=== Check if GCC files exist ==="
          if (Test-Path "C:\msys64\mingw64\bin\gcc.exe") {
            Write-Host "✅ gcc.exe found!"
          } else {
            Write-Host "❌ gcc.exe NOT found"
            Write-Host "Force installing GCC toolchain..."
            C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pacman -S --noconfirm --overwrite '*' mingw-w64-x86_64-gcc mingw-w64-x86_64-toolchain"
          }

      - name: Verify GDAL installation
        shell: pwsh
        run: |
          Write-Host "=== Verify pacman installation ==="
          C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pacman -Q | grep gdal"

          Write-Host "=== Check if GDAL files exist ==="
          if (Test-Path "C:\msys64\mingw64\bin\gdal-config") {
            Write-Host "✅ gdal-config found!"
          } else {
            Write-Host "❌ gdal-config NOT found"
          }

          if (Test-Path "C:\msys64\mingw64\bin\gdalinfo.exe") {
            Write-Host "✅ gdalinfo.exe found!"
          } else {
            Write-Host "❌ gdalinfo.exe NOT found"
          }

          Write-Host "=== Force reinstall GDAL if missing ==="
          if (-not (Test-Path "C:\msys64\mingw64\bin\gdal-config")) {
            Write-Host "Reinstalling GDAL..."
            C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pacman -S --noconfirm --overwrite '*' mingw-w64-x86_64-gdal"
          }

      - name: Setup Rust with GNU toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-pc-windows-gnu

      - name: Find GDAL installation
        shell: pwsh
        run: |
          Write-Host "=== Detailed GDAL search ==="
          if (Test-Path "C:\msys64\mingw64\bin") {
            Write-Host "=== ALL files in mingw64/bin ==="
            Get-ChildItem "C:\msys64\mingw64\bin" | Select-Object Name | Sort-Object Name
            Write-Host "=== GDAL files in mingw64/bin ==="
            Get-ChildItem "C:\msys64\mingw64\bin" | Where-Object Name -like "*gdal*" | Select-Object Name
          }

          if (Test-Path "C:\msys64\mingw64\lib") {
            Write-Host "=== GDAL libraries in mingw64/lib ==="
            Get-ChildItem "C:\msys64\mingw64\lib" | Where-Object Name -like "*gdal*" | Select-Object Name
            Write-Host "=== pkg-config files ==="
            Get-ChildItem "C:\msys64\mingw64\lib\pkgconfig" -ErrorAction SilentlyContinue | Where-Object Name -like "*gdal*" | Select-Object Name
          }

          Write-Host "=== Search for gdal-config anywhere ==="
          Get-ChildItem -Path "C:\msys64" -Recurse -Name "*gdal-config*" -ErrorAction SilentlyContinue

          Write-Host "=== Check pacman packages ==="
          C:\msys64\usr\bin\bash.exe -lc "pacman -Q | grep gdal"

      - name: Configure build environment
        shell: pwsh
        run: |
          # First, let's see what's actually installed
          Write-Host "=== Testing GDAL via MINGW64 environment ==="
          $env:MSYSTEM = "MINGW64"
          C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && which gdal-config"
          C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && gdal-config --version"
          C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && gdal-config --libs"

          # Set up environment variables (try both possible locations)
          if (Test-Path "C:\msys64\mingw64") {
            echo "GDAL_HOME=C:\msys64\mingw64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "GDAL_LIB_DIR=C:\msys64\mingw64\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "GDAL_INCLUDE_DIR=C:\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

          # Ensure we're using the GNU toolchain
          echo "RUSTUP_TOOLCHAIN=stable-x86_64-pc-windows-gnu" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Add MSYS2 to PATH
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create Cargo config for GNU toolchain
        shell: pwsh
        run: |
          # Verify gcc.exe exists before creating config
          if (-not (Test-Path "C:\msys64\mingw64\bin\gcc.exe")) {
            Write-Host "❌ GCC not found at C:\msys64\mingw64\bin\gcc.exe"
            Write-Host "Searching for gcc.exe..."
            Get-ChildItem -Path "C:\msys64" -Recurse -Name "gcc.exe" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Found gcc.exe at: C:\msys64\$_"
            }
            exit 1
          }

          Write-Host "✅ GCC found at C:\msys64\mingw64\bin\gcc.exe"

          New-Item -Path "$env:USERPROFILE\.cargo" -ItemType Directory -Force
          @"
          [target.x86_64-pc-windows-gnu]
          linker = "C:\\msys64\\mingw64\\bin\\gcc.exe"
          ar = "C:\\msys64\\mingw64\\bin\\ar.exe"

          [build]
          target = "x86_64-pc-windows-gnu"
          "@ | Out-File -FilePath "$env:USERPROFILE\.cargo\config.toml" -Encoding UTF8

      - name: Verify installations (non-blocking)
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Host "=== Rust toolchain ==="
          rustup default stable-x86_64-pc-windows-gnu
          rustc --version --verbose

          Write-Host "=== Environment variables ==="
          Write-Host "GDAL_HOME: $env:GDAL_HOME"
          Write-Host "PKG_CONFIG_PATH: $env:PKG_CONFIG_PATH"
          Write-Host "PATH includes:"
          $env:PATH -split ';' | Where-Object { $_ -like "*msys*" } | ForEach-Object { Write-Host "  $_" }

          Write-Host "=== Test GDAL via MINGW64 bash ==="
          $env:MSYSTEM = "MINGW64"
          C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pkg-config --version"
          C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pkg-config --exists gdal && echo 'GDAL pkg-config found' || echo 'GDAL pkg-config not found'"
          $result = C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pkg-config --exists gdal" 2>$null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "=== GDAL pkg-config details ==="
            C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pkg-config --libs gdal"
            C:\msys64\usr\bin\bash.exe -lc "export MSYSTEM=MINGW64 && source /etc/profile && pkg-config --cflags gdal"
          }
      
      - name: Fix bindgen environment  
        shell: pwsh
        run: |
          Write-Host "=== Setting up bindgen environment ==="
          # Force bindgen to use MSYS2 clang and toolchain exclusively
          echo "LIBCLANG_PATH=C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BINDGEN_EXTRA_CLANG_ARGS=--target=x86_64-w64-mingw32 --sysroot=C:\msys64\mingw64 -nostdinc -isystem C:\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
      - name: Verify GDAL libraries
        shell: pwsh  
        run: |
          Write-Host "=== Checking GDAL libraries ==="
          if (Test-Path "C:\msys64\mingw64\lib") {
            Write-Host "GDAL-related files in lib directory:"
            Get-ChildItem "C:\msys64\mingw64\lib" | Where-Object Name -like "*gdal*" | Select-Object Name, Length
            Write-Host "All .dll.a files:"
            Get-ChildItem "C:\msys64\mingw64\lib" -Name "*.dll.a" | Where-Object { $_ -like "*gdal*" }
            Write-Host "All .a files:"  
            Get-ChildItem "C:\msys64\mingw64\lib" -Name "*.a" | Where-Object { $_ -like "*gdal*" }
          }
          
          if (Test-Path "C:\msys64\mingw64\bin") {
            Write-Host "GDAL DLLs in bin directory:"
            Get-ChildItem "C:\msys64\mingw64\bin" -Name "*.dll" | Where-Object { $_ -like "*gdal*" }
          }

      - name: Build
        shell: pwsh
        run: |
          Write-Host "=== Starting build ==="
          
          # Set environment for this step
          $env:PKG_CONFIG_PATH = $env:PKG_CONFIG_PATH
          
          # Try to bypass bindgen issues by using docs.rs mode
          $env:DOCS_RS = "1"
          
          # Ensure linker can find GDAL library and dependencies
          $env:LIBRARY_PATH = "C:\msys64\mingw64\lib"
          $env:LD_LIBRARY_PATH = "C:\msys64\mingw64\lib"
          $env:PATH = "C:\msys64\mingw64\bin;$env:PATH"
          
          # Build normally
          cargo build --release --target x86_64-pc-windows-gnu --verbose

      - name: Compress artifacts
        if: success()
        shell: pwsh
        run: |
          cd target/x86_64-pc-windows-gnu/release
          7z a ../../../raster-calc-windows-x86_64.zip raster-calc.exe

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: raster-calc-windows-x86_64
          path: raster-calc-windows-x86_64.zip
