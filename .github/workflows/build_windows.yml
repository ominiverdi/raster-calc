name: Build Windows Release (Fixed)

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to attach binaries to (e.g., v0.1.0)"
        required: false
        default: "test-build"

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust MSVC toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-pc-windows-msvc

      - name: Download and setup GDAL from OSGeo4W (more reliable)
        shell: pwsh
        run: |
          Write-Host "=== Setting up GDAL via OSGeo4W (more reliable) ==="
          
          # Create working directory
          New-Item -ItemType Directory -Path "C:\gdal" -Force
          
          # Download OSGeo4W installer
          $installerUrl = "https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe"
          $installerPath = "C:\gdal\osgeo4w-setup.exe"
          
          Write-Host "Downloading OSGeo4W installer..."
          Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath -UseBasicParsing
          
          # Install GDAL via OSGeo4W (silent install)
          Write-Host "Installing GDAL via OSGeo4W..."
          Start-Process -FilePath $installerPath -ArgumentList @(
            "--quiet-mode",
            "--no-desktop",
            "--no-startmenu", 
            "--root", "C:\OSGeo4W",
            "--site", "https://download.osgeo.org/osgeo4w/v2/",
            "--packages", "gdal,gdal-devel"
          ) -Wait -NoNewWindow
          
          # Check if installation succeeded
          $gdalRoot = "C:\OSGeo4W"
          $gdalLib = "$gdalRoot\lib\gdal_i.lib"
          $gdalInclude = "$gdalRoot\include\gdal.h"
          
          if (-not (Test-Path $gdalLib)) {
            Write-Host "❌ OSGeo4W approach failed, trying direct download..."
            
            # Fallback: Download pre-built binaries directly
            $directUrl = "https://github.com/cgohlke/geospatial-wheels/releases/download/v2023.8.27/gdal-3.7.2-cp311-cp311-win_amd64.whl"
            Write-Host "Using fallback approach with conda-forge style setup..."
            
            # Use conda to install GDAL (GitHub Actions has miniconda pre-installed)
            & conda install -c conda-forge gdal=3.7 --yes --quiet
            
            # Find conda installation
            $condaRoot = & conda info --base
            $gdalRoot = "$condaRoot\Library"
            
            Write-Host "Using conda GDAL at: $gdalRoot"
          }
          
          # Verify the installation and handle library naming
          Write-Host "GDAL installation directory: $gdalRoot"
          
          # Check what we have
          Write-Host "Checking installation structure..."
          if (Test-Path "$gdalRoot\lib") {
            Write-Host "Found lib directory:"
            Get-ChildItem "$gdalRoot\lib\*gdal*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
          }
          
          if (Test-Path "$gdalRoot\include") {
            Write-Host "Found include directory:"
            Get-ChildItem "$gdalRoot\include\gdal*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
          }
          
          # Handle library naming (gdal.lib vs gdal_i.lib)
          $gdalLib = "$gdalRoot\lib\gdal.lib"
          $gdalILib = "$gdalRoot\lib\gdal_i.lib"
          
          if ((Test-Path $gdalLib) -and (-not (Test-Path $gdalILib))) {
            Write-Host "🔧 Creating gdal_i.lib from gdal.lib (naming fix)"
            Copy-Item $gdalLib $gdalILib
          }
          
          # Set environment variables
          echo "GDAL_HOME=$gdalRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_LIB_DIR=$gdalRoot\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_INCLUDE_DIR=$gdalRoot\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_VERSION=3.7.2" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Add to PATH
          echo "$gdalRoot\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify GDAL installation
        shell: pwsh
        run: |
          Write-Host "=== Verifying GDAL installation ==="
          
          Write-Host "Environment variables:"
          Write-Host "GDAL_HOME: $env:GDAL_HOME"
          Write-Host "GDAL_LIB_DIR: $env:GDAL_LIB_DIR"  
          Write-Host "GDAL_INCLUDE_DIR: $env:GDAL_INCLUDE_DIR"
          Write-Host "GDAL_VERSION: $env:GDAL_VERSION"
          
          # Check for required files
          $requiredFiles = @(
            "$env:GDAL_LIB_DIR\gdal_i.lib",
            "$env:GDAL_INCLUDE_DIR\gdal.h"
          )
          
          $allFilesFound = $true
          foreach ($file in $requiredFiles) {
            if (Test-Path $file) {
              Write-Host "✅ Found: $file"
            } else {
              Write-Host "❌ Missing: $file"
              $allFilesFound = $false
            }
          }
          
          if (-not $allFilesFound) {
            Write-Host "🔍 Debugging missing files..."
            
            # Show what we actually have
            Write-Host "GDAL_HOME contents:"
            if (Test-Path $env:GDAL_HOME) {
              Get-ChildItem $env:GDAL_HOME | ForEach-Object { Write-Host "  $($_.Name)" }
            }
            
            Write-Host "Available lib files:"
            if (Test-Path $env:GDAL_LIB_DIR) {
              Get-ChildItem "$env:GDAL_LIB_DIR\*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
            } else {
              Write-Host "  LIB_DIR does not exist!"
            }
            
            Write-Host "Available include files:"
            if (Test-Path $env:GDAL_INCLUDE_DIR) {
              Get-ChildItem "$env:GDAL_INCLUDE_DIR\*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
            } else {
              Write-Host "  INCLUDE_DIR does not exist!"
            }
            
            # Final attempt: create missing library link if possible
            $gdalLib = "$env:GDAL_LIB_DIR\gdal.lib"
            $gdalILib = "$env:GDAL_LIB_DIR\gdal_i.lib"
            
            if ((Test-Path $gdalLib) -and (-not (Test-Path $gdalILib))) {
              Write-Host "🔧 Final attempt: Copying gdal.lib to gdal_i.lib"
              Copy-Item $gdalLib $gdalILib -Force
            }
            
            # Check again
            if (-not (Test-Path $gdalILib)) {
              Write-Host "❌ Could not resolve gdal_i.lib - trying alternative approach"
              
              # Last resort: check if there are any .lib files we can use
              $libFiles = Get-ChildItem "$env:GDAL_LIB_DIR\*.lib" -ErrorAction SilentlyContinue
              if ($libFiles) {
                Write-Host "Found these .lib files:"
                $libFiles | ForEach-Object { Write-Host "  $($_.Name)" }
                
                # Try to find a GDAL library to copy
                $gdalLibAlt = $libFiles | Where-Object { $_.Name -like "*gdal*" } | Select-Object -First 1
                if ($gdalLibAlt) {
                  Write-Host "🔧 Using $($gdalLibAlt.Name) as gdal_i.lib"
                  Copy-Item $gdalLibAlt.FullName $gdalILib -Force
                }
              }
            }
          }
          
          Write-Host "Final verification:"
          if (Test-Path "$env:GDAL_LIB_DIR\gdal_i.lib") {
            Write-Host "✅ gdal_i.lib is ready"
          } else {
            Write-Host "❌ gdal_i.lib still missing - build will likely fail"
            exit 1
          }
          
          if (Test-Path "$env:GDAL_INCLUDE_DIR\gdal.h") {
            Write-Host "✅ gdal.h is ready"
          } else {
            Write-Host "❌ gdal.h missing - build will likely fail"
            exit 1
          }

      - name: Build with MSVC
        shell: pwsh
        run: |
          Write-Host "=== Building with MSVC ==="
          
          # Verify environment is set
          Write-Host "Build environment:"
          Write-Host "GDAL_HOME: $env:GDAL_HOME"
          Write-Host "GDAL_LIB_DIR: $env:GDAL_LIB_DIR"
          Write-Host "GDAL_INCLUDE_DIR: $env:GDAL_INCLUDE_DIR"
          Write-Host "GDAL_VERSION: $env:GDAL_VERSION"
          
          # Build
          cargo build --release --target x86_64-pc-windows-msvc --verbose
          
          # Verify binary was created
          if (Test-Path "target\x86_64-pc-windows-msvc\release\raster-calc.exe") {
            Write-Host "✅ Build successful!"
            
            # Show binary info
            $binary = Get-Item "target\x86_64-pc-windows-msvc\release\raster-calc.exe"
            Write-Host "Binary size: $([math]::Round($binary.Length / 1MB, 2)) MB"
          } else {
            Write-Host "❌ Build failed - binary not created"
            exit 1
          }

      - name: Test binary
        shell: pwsh
        run: |
          Write-Host "=== Testing binary ==="
          
          # Add GDAL DLLs to PATH for testing
          $env:PATH = "$env:GDAL_HOME\bin;$env:PATH"
          
          # Test the binary
          $binary = "target\x86_64-pc-windows-msvc\release\raster-calc.exe"
          
          Write-Host "Testing --help:"
          & $binary --help
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Binary test successful!"
            
            Write-Host "Testing --version:"
            & $binary --version
          } else {
            Write-Host "❌ Binary test failed (exit code: $LASTEXITCODE)"
            
            # Check for missing DLLs
            Write-Host "Checking for missing dependencies..."
            try {
              & $binary 2>&1 | Write-Host
            } catch {
              Write-Host "Error details: $_"
            }
            
            exit 1
          }

      - name: Create release package
        shell: pwsh
        run: |
          Write-Host "=== Creating release package ==="
          
          # Create a directory with the binary and required DLLs
          New-Item -ItemType Directory -Path "release_package" -Force
          
          # Copy the binary
          Copy-Item "target\x86_64-pc-windows-msvc\release\raster-calc.exe" "release_package\"
          
          # Copy required GDAL DLLs
          $gdalBinDir = "$env:GDAL_HOME\bin"
          if (Test-Path $gdalBinDir) {
            Write-Host "Copying GDAL DLLs from: $gdalBinDir"
            Get-ChildItem "$gdalBinDir\*.dll" | ForEach-Object {
              Copy-Item $_.FullName "release_package\"
              Write-Host "  Copied: $($_.Name)"
            }
          }
          
          # Create README for the package
          @"
