name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to attach binaries to (e.g., v0.1.0)"
        required: false
        default: "test-build"

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Use the standard Windows development approach
      - name: Setup Rust MSVC toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-pc-windows-msvc

      - name: Install GDAL via vcpkg
        shell: pwsh
        run: |
          Write-Host "=== Installing GDAL via vcpkg (Windows standard) ==="
          
          # Use GitHub's pre-installed vcpkg
          $env:VCPKG_ROOT = "C:\vcpkg"
          
          # Install GDAL (this is the standard Windows approach)
          & C:\vcpkg\vcpkg.exe install gdal:x64-windows
          
          # Set environment variables for build
          $env:GDAL_HOME = "C:\vcpkg\installed\x64-windows"
          echo "GDAL_HOME=C:\vcpkg\installed\x64-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GDAL_INCLUDE_DIR=C:\vcpkg\installed\x64-windows\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Add to PATH for runtime
          echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify GDAL installation
        shell: pwsh
        run: |
          Write-Host "=== Verifying GDAL installation ==="
          
          # Check if GDAL files exist
          $gdalLib = "C:\vcpkg\installed\x64-windows\lib\gdal.lib"
          $gdalInclude = "C:\vcpkg\installed\x64-windows\include\gdal.h"
          $gdalBin = "C:\vcpkg\installed\x64-windows\bin\gdal-config.exe"
          
          if (Test-Path $gdalLib) {
            Write-Host "✅ GDAL library found: $gdalLib"
          } else {
            Write-Host "❌ GDAL library not found!"
            exit 1
          }
          
          if (Test-Path $gdalInclude) {
            Write-Host "✅ GDAL headers found: $gdalInclude"
          } else {
            Write-Host "❌ GDAL headers not found!"
            exit 1
          }

      - name: Build with MSVC
        shell: pwsh
        run: |
          Write-Host "=== Building with MSVC (Windows standard) ==="
          
          # Set GDAL environment
          $env:GDAL_HOME = "C:\vcpkg\installed\x64-windows"
          $env:GDAL_LIB_DIR = "C:\vcpkg\installed\x64-windows\lib"
          $env:GDAL_INCLUDE_DIR = "C:\vcpkg\installed\x64-windows\include"
          
          # Build for MSVC target
          cargo build --release --target x86_64-pc-windows-msvc --verbose
          
          # Verify binary was created
          if (Test-Path "target\x86_64-pc-windows-msvc\release\raster-calc.exe") {
            Write-Host "✅ Build successful!"
          } else {
            Write-Host "❌ Build failed - binary not created"
            exit 1
          }

      - name: Test binary
        shell: pwsh
        run: |
          Write-Host "=== Testing binary ==="
          
          # Add GDAL DLLs to PATH for testing
          $env:PATH = "C:\vcpkg\installed\x64-windows\bin;$env:PATH"
          
          # Test the binary
          $binary = "target\x86_64-pc-windows-msvc\release\raster-calc.exe"
          & $binary --help
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Binary test successful!"
          } else {
            Write-Host "❌ Binary test failed"
            exit 1
          }

      - name: Create release package
        shell: pwsh
        run: |
          Write-Host "=== Creating release package ==="
          
          # Create a directory with the binary and required DLLs
          New-Item -ItemType Directory -Path "release_package" -Force
          
          # Copy the binary
          Copy-Item "target\x86_64-pc-windows-msvc\release\raster-calc.exe" "release_package\"
          
          # Copy required GDAL DLLs
          $gdalBinDir = "C:\vcpkg\installed\x64-windows\bin"
          Get-ChildItem "$gdalBinDir\*.dll" | ForEach-Object {
            Copy-Item $_.FullName "release_package\"
          }
          
          # Create zip package
          Compress-Archive -Path "release_package\*" -DestinationPath "raster-calc-windows-x86_64.zip" -Force
          
          Write-Host "✅ Release package created"
          
          # Show package contents
          Write-Host "Package contents:"
          Get-ChildItem "release_package" | ForEach-Object { Write-Host "  $($_.Name)" }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: raster-calc-windows-x86_64
          path: raster-calc-windows-x86_64.zip

      - name: Upload to release (if tag provided)
        if: github.event.inputs.tag_name != 'test-build'
        uses: softprops/action-gh-release@v2
        with:
          files: raster-calc-windows-x86_64.zip
          tag_name: ${{ github.event.inputs.tag_name }}
          fail_on_unmatched_files: true