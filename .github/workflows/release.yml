name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag to attach binaries to (e.g., v0.1.0)'
        required: true

permissions:
  contents: write

jobs:
  build-unix:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: raster-calc
            asset_name: raster-calc-linux-x86_64.tar.gz
          - os: macos-latest
            artifact_name: raster-calc
            asset_name: raster-calc-macos-x86_64.tar.gz

    steps:
    - uses: actions/checkout@v4
    
    - name: Install GDAL (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgdal-dev gdal-bin
    
    - name: Install GDAL (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gdal
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Compress artifacts
      run: |
        cd target/release
        tar czvf ../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.asset_name }}
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install MSYS2 and GDAL
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gdal
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-pkg-config
    
    - name: Setup Rust with GNU toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable-x86_64-pc-windows-gnu
    
    - name: Configure build environment
      shell: pwsh
      run: |
        # Set up environment variables for GDAL (Windows paths for GitHub ENV)
        echo "GDAL_HOME=C:\msys64\mingw64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GDAL_LIB_DIR=C:\msys64\mingw64\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GDAL_INCLUDE_DIR=C:\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Ensure we're using the GNU toolchain
        echo "RUSTUP_TOOLCHAIN=stable-x86_64-pc-windows-gnu" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Add MSYS2 to PATH for subsequent steps (Windows format)
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Create Cargo config for GNU toolchain
      shell: pwsh
      run: |
        New-Item -Path "$env:USERPROFILE\.cargo" -ItemType Directory -Force
        @"
        [target.x86_64-pc-windows-gnu]
        linker = "C:\\msys64\\mingw64\\bin\\gcc.exe"
        ar = "C:\\msys64\\mingw64\\bin\\ar.exe"
        
        [build]
        target = "x86_64-pc-windows-gnu"
        "@ | Out-File -FilePath "$env:USERPROFILE\.cargo\config.toml" -Encoding UTF8
    
    - name: Verify GDAL installation
      shell: pwsh
      run: |
        # Test GDAL installation
        C:\msys64\mingw64\bin\gdal-config.exe --version
        C:\msys64\mingw64\bin\gdal-config.exe --libs
        
        # Test pkg-config
        $env:PKG_CONFIG_PATH = "C:\msys64\mingw64\lib\pkgconfig"
        C:\msys64\mingw64\bin\pkg-config.exe --libs gdal
        
        # Check if libraries exist
        if (Test-Path "C:\msys64\mingw64\lib\libgdal*") {
          Get-ChildItem "C:\msys64\mingw64\lib\libgdal*" | Select-Object Name
        } else {
          Write-Host "GDAL libraries not found!"
          exit 1
        }
    
    - name: Build
      shell: pwsh
      run: |
        # Verify Rust toolchain
        rustup default stable-x86_64-pc-windows-gnu
        rustc --version --verbose
        
        # Verify GDAL is accessible and environment variables
        Write-Host "GDAL_HOME: $env:GDAL_HOME"
        Write-Host "PKG_CONFIG_PATH: $env:PKG_CONFIG_PATH"
        C:\msys64\mingw64\bin\gdal-config.exe --version
        
        # Build the project with GNU target
        cargo build --release --target x86_64-pc-windows-gnu --verbose
    
    - name: Compress artifacts
      shell: pwsh
      run: |
        cd target/x86_64-pc-windows-gnu/release
        7z a ../../../raster-calc-windows-x86_64.zip raster-calc.exe
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        files: raster-calc-windows-x86_64.zip
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}