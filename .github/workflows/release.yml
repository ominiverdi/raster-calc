name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: raster-calc
            asset_name: raster-calc-${{ github.ref_name }}-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: raster-calc
            asset_name: raster-calc-${{ github.ref_name }}-linux-aarch64
          - os: windows-latest
            artifact_name: raster-calc.exe
            asset_name: raster-calc-${{ github.ref_name }}-windows-x86_64
          - os: macos-latest
            artifact_name: raster-calc
            asset_name: raster-calc-${{ github.ref_name }}-macos-x86_64

    steps:
    - uses: actions/checkout@v3
    
    - name: Install GDAL (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == null
      run: |
        sudo apt-get update
        sudo apt-get install -y libgdal-dev gdal-bin
    
    - name: Setup for ARM cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        sudo apt-get install -y libgdal-dev gdal-bin
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
    
    - name: Install GDAL (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gdal
    
    - name: Install GDAL (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and install OSGeo4W which includes GDAL
        curl -L -o osgeo4w-setup.exe https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe
        .\osgeo4w-setup.exe --quiet-mode --no-desktop --no-startmenu --no-shortcuts --upgrade-also --site http://download.osgeo.org/osgeo4w/v2 --packages gdal
        echo "GDAL_HOME=C:\OSGeo4W" >> $env:GITHUB_ENV
        echo "C:\OSGeo4W\bin" >> $env:GITHUB_PATH
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target || '' }}
    
    - name: Set PKG_CONFIG_PATH (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "PKG_CONFIG_PATH=C:\OSGeo4W\lib\pkgconfig" >> $env:GITHUB_ENV
    
    - name: Build
      run: |
        if [ "${{ matrix.target }}" != "" ]; then
          cargo build --release --target ${{ matrix.target }} --verbose
        else
          cargo build --release --verbose
        fi
      shell: bash
    
    - name: Compress artifacts (ARM)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        cd target/${{ matrix.target }}/release
        tar czvf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
    
    - name: Compress artifacts (Unix)
      if: matrix.os != 'windows-latest' && matrix.target == null
      run: |
        cd target/release
        tar czvf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        
    - name: Compress artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/release
        7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
    
    - name: Upload artifacts (ARM)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload artifacts (Unix)
      if: matrix.os != 'windows-latest' && matrix.target == null
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/release/${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/release/${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip