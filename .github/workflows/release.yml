name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag to attach binaries to (e.g., v0.1.0)'
        required: true

permissions:
  contents: write

jobs:
  build-unix:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: raster-calc
            asset_name: raster-calc-linux-x86_64.tar.gz
          - os: macos-latest
            artifact_name: raster-calc
            asset_name: raster-calc-macos-x86_64.tar.gz

    steps:
    - uses: actions/checkout@v3
    
    - name: Install GDAL (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgdal-dev gdal-bin
    
    - name: Install GDAL (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gdal
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Compress artifacts
      run: |
        cd target/release
        tar czvf ../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.asset_name }}
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install MSYS2 and GDAL
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gdal
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-pkg-config
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu
    
    - name: Add MSYS2 to PATH
      run: |
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Set PKG_CONFIG_PATH
      run: |
        echo "PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    
    - name: Build
      run: |
        cargo build --release --target x86_64-pc-windows-gnu --verbose
    
    - name: Compress artifacts
      run: |
        cd target/x86_64-pc-windows-gnu/release
        7z a ../../../raster-calc-windows-x86_64.zip raster-calc.exe
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: raster-calc-windows-x86_64.zip
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}

  build-arm:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build ARM64 in Docker
      run: |
        # Create Dockerfile for ARM build
        cat > Dockerfile << 'EOF'
        FROM arm64v8/rust:slim
        
        RUN apt-get update && apt-get install -y \
            build-essential \
            libgdal-dev \
            gdal-bin \
            pkg-config \
            libclang-dev \
            clang
        
        WORKDIR /src
        COPY . .
        
        RUN cargo build --release
        
        CMD ["cp", "-r", "/src/target/release/raster-calc", "/output/"]
        EOF
        
        # Create output directory
        mkdir -p output
        
        # Build Docker image and run container
        docker build -t raster-calc-arm-builder --platform linux/arm64 .
        docker run --platform linux/arm64 --rm -v $(pwd)/output:/output raster-calc-arm-builder
        
        # Compress the binary
        cd output
        tar czvf ../raster-calc-linux-aarch64.tar.gz raster-calc
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: raster-calc-linux-aarch64.tar.gz
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}