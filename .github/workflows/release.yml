name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag to attach binaries to (e.g., v0.1.0)'
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: raster-calc
            asset_name: raster-calc-linux-x86_64.tar.gz
          - os: windows-latest
            artifact_name: raster-calc.exe
            asset_name: raster-calc-windows-x86_64.zip
          - os: macos-latest
            artifact_name: raster-calc
            asset_name: raster-calc-macos-x86_64.tar.gz

    steps:
    - uses: actions/checkout@v3
    
    - name: Install GDAL (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgdal-dev gdal-bin
    
    - name: Install GDAL (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gdal
    
    - name: Install GDAL (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Use vcpkg for GDAL installation
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install gdal:x64-windows

        # Set environment variables for GDAL
        echo "GDAL_HOME=$(pwd)\installed\x64-windows" >> $env:GITHUB_ENV
        echo "GDAL_INCLUDE_DIR=$(pwd)\installed\x64-windows\include" >> $env:GITHUB_ENV
        echo "GDAL_LIB_DIR=$(pwd)\installed\x64-windows\lib" >> $env:GITHUB_ENV
        echo "$(pwd)\installed\x64-windows\bin" >> $env:GITHUB_PATH
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Compress artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/release
        tar czvf ../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        
    - name: Compress artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/release
        7z a ../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.asset_name }}
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}

  # Separate job for ARM build
  build-arm:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build ARM64 in Docker
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        docker buildx create --name multiarch --driver docker-container --use
        docker buildx inspect --bootstrap
        
        # Create Dockerfile for ARM build
        cat > Dockerfile << 'EOF'
        FROM arm64v8/rust:slim
        
        RUN apt-get update && apt-get install -y \
            build-essential \
            libgdal-dev \
            gdal-bin \
            pkg-config
        
        WORKDIR /src
        COPY . .
        
        RUN cargo build --release
        
        CMD ["cp", "-r", "/src/target/release/raster-calc", "/output/"]
        EOF
        
        # Create output directory
        mkdir -p output
        
        # Build in Docker
        docker buildx build --platform linux/arm64 -t raster-calc-arm-builder -f Dockerfile .
        
        # Run container to copy binary to host
        docker run --platform linux/arm64 --rm -v $(pwd)/output:/output raster-calc-arm-builder
        
        # Compress the binary
        cd output
        tar czvf ../raster-calc-linux-aarch64.tar.gz raster-calc
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: raster-calc-linux-aarch64.tar.gz
        tag_name: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}